{"version":3,"sources":["../../../src/js/components/Terminal.js"],"names":["replace","random","toString","Object","keys","forEach","toLowerCase","split","options","Error","parse","name","help","version","method","needsInstance","componentWillMount","loadPlugins","assembleCommands","setDescriptions","setShortcuts","createTab","setState","prompt","props","promptSymbol","componentDidMount","watchConsoleLogging","color","backgroundColor","allowTabs","state","tabs","push","handleChange","handlerKeyPress","registerInstance","activeTab","removeTab","splice","getAppContent","show","minimise","getBar","getContent","getNote","style","barColor","showActions","hideTopBar","actionHandlers","setActiveTab","toggleState","getPluginData","pluginData","setPluginData","defaultDesciptions","descriptions","plugins","defaultShortcuts","shortcuts","setPromptPrefix","promptPrefix","setFalse","setTrue","setValueWithHistory","history","historyCounter","value","instances","find","index","printLine","bind","runCommand","getPluginMethod","getData","displayName","setData","pluginInstances","updateApi","getPublicMethods","_getName","_getVersion","console","error","instance","pluginMethods","indexOf","filter","defaultCommands","commands","autocompleteValue","findBestMatch","bestMatch","rating","target","clearScreen","summary","checkShortcuts","length","keyInputs","map","slice","preventDefault","stopPropagation","editLine","line","_","join","input","key","shiftKey","dontShowCommand","defaultData","readStdOut","values","commandPassThrough","printToActive","showHelp","showMsg","msg","clear","echo","description","init","parseInt","defaultValue","darwin","startState","maximise","symbol","barShowing","tabsShowing","openWindow","closeWindow","minimiseWindow","unminimiseWindow","maximiseWindow","unmaximiseWindow","toggleShow","toggleMaximise","toggleMinimize","maxWidth","height","propTypes","defaultProps","childContextTypes"],"mappings":"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","file":"Terminal.js","sourcesContent":["/* eslint-disable no-console, react/sort-comp */\nimport React, { Component } from 'react'; // eslint-disable-line\nimport stringSimilarity from 'string-similarity';\nimport whatkey from 'whatkey';\nimport isEqual from 'lodash.isequal';\nimport Command from '../args';\nimport { handleLogging, getOs } from '../utils';\nimport {\n  TerminalPropTypes,\n  TerminalContextTypes,\n  TerminalDefaultProps,\n} from './types';\nimport Bar from './Bar';\nimport Content from './Content';\nimport Tabs from './Tabs';\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = Math.random() * 16 | 0; // eslint-disable-line no-bitwise\n    const v = c === 'x' ? r : (r & 0x3 | 0x8); // eslint-disable-line\n    return v.toString(16);\n  });\n}\n\nconst os = getOs();\n\nfunction getShortcuts(shortcuts, obj) {\n  Object.keys(obj).forEach((key) => {\n    const split = key.toLowerCase().replace(/\\s/g, '').split(',');\n    split.forEach((osName) => {\n      if (osName === os) {\n        shortcuts = {\n          ...shortcuts,\n          ...obj[key],\n        };\n      }\n    });\n  });\n  return shortcuts;\n}\n\nfunction modCommands(commands) {\n  const newCommands = {};\n\n  Object.keys(commands).forEach((name) => {\n    let needsInstance = false;\n    const definition = commands[name];\n    let method = definition;\n    let parse = i => i;\n    if (typeof definition === 'object') {\n      const cmd = new Command();\n      if (typeof definition.options !== 'undefined') {\n        try {\n          cmd.options(definition.options);\n        } catch (e) {\n          throw new Error('options for command wrong format');\n        }\n      }\n      parse = i =>\n        cmd.parse(i, {\n          name,\n          help: true,\n          version: false,\n        });\n      method = definition.method;\n      needsInstance = definition.needsInstance || false;\n    }\n\n    newCommands[name] = {\n      parse,\n      method,\n      needsInstance,\n    };\n  });\n\n  return newCommands;\n}\n\nclass Terminal extends Component {\n  static displayName = 'Terminal';\n\n  static propTypes = TerminalPropTypes;\n\n  static defaultProps = TerminalDefaultProps;\n\n  static childContextTypes = TerminalContextTypes;\n\n  constructor(props) {\n    super(props);\n\n    this.pluginData = {};\n\n    this.defaultCommands = {\n      // eslint-disable-line react/sort-comp\n      show: this.showMsg,\n      clear: {\n        method: this.clearScreen,\n        needsInstance: true,\n      },\n      help: {\n        method: this.showHelp,\n        needsInstance: true,\n      },\n      echo: input => input.slice(1).join(' '),\n      'edit-line': {\n        method: this.editLine,\n        needsInstance: true,\n        options: [\n          {\n            name: 'line',\n            description: 'the line you want to edit. -1 is the last line',\n            init: value => parseInt(value, 10),\n            defaultValue: -1,\n          },\n        ],\n      },\n    };\n\n    this.defaultDesciptions = {\n      show: 'show the msg',\n      clear: 'clear the screen',\n      help: 'list all the commands',\n      echo: 'output the input',\n      'edit-line': 'edit the contents of an output line',\n    };\n\n    this.defaultShortcuts = {\n      'win, linux, darwin': {\n        'alt + t': this.createTab,\n      },\n      'win, linux': {\n        'ctrl + l': 'clear',\n      },\n      darwin: {\n        'cmd + k': 'clear',\n      },\n    };\n\n    this.state = {\n      prompt: '>',\n      commands: {},\n      descriptions: {},\n      show: props.startState !== 'closed',\n      minimise: props.startState === 'minimised',\n      maximise: props.startState === 'maximised',\n      shortcuts: {},\n      activeTab: '',\n      tabs: [],\n      instances: [],\n    };\n  }\n\n  getChildContext() {\n    return {\n      instances: this.state.instances,\n      symbol: this.state.prompt,\n      show: this.state.show,\n      minimise: this.state.minimise,\n      maximise: this.state.maximise,\n      activeTab: this.state.activeTab,\n      barShowing: !this.props.hideTopBar,\n      tabsShowing: this.props.allowTabs,\n      openWindow: this.setTrue('show'),\n      closeWindow: this.setFalse('show'),\n      minimiseWindow: this.setTrue('minimise'),\n      unminimiseWindow: this.setFalse('minimise'),\n      maximiseWindow: this.setTrue('maximise'),\n      unmaximiseWindow: this.setFalse('maximise'),\n      toggleShow: this.toggleState('show'),\n      toggleMaximise: this.toggleState('maximise'),\n      toggleMinimize: this.toggleState('minimise'),\n    };\n  }\n\n  // Prepare the symbol\n  componentWillMount = () => {\n    this.loadPlugins();\n    this.assembleCommands();\n    this.setDescriptions();\n    this.setShortcuts();\n\n    this.createTab();\n    this.setState({ prompt: this.props.promptSymbol });\n  };\n\n  // Load everything!\n  componentDidMount = () => {\n    if (this.props.watchConsoleLogging) {\n      this.watchConsoleLogging();\n    }\n  };\n\n  // Tab creation\n  createTab = () => {\n    const { color, backgroundColor, prompt, allowTabs } = this.props;\n    if (allowTabs) {\n      const { tabs } = this.state;\n      const id = uuidv4();\n\n      const inputStyles = { backgroundColor, color };\n      const promptStyles = { color: prompt };\n      const backgroundColorStyles = { backgroundColor };\n\n      tabs.push((\n        <Content\n          key={id}\n          id={id}\n          prompt={promptStyles}\n          inputStyles={inputStyles}\n          handleChange={this.handleChange}\n          handlerKeyPress={this.handlerKeyPress}\n          backgroundColor={backgroundColorStyles}\n          register={(...args) => this.registerInstance(id, ...args)}\n        />\n      ));\n\n      this.setState({ activeTab: id, tabs });\n    }\n  }\n\n  // Tab removal\n  removeTab = (index) => {\n    const { tabs } = this.state;\n    tabs.splice(index, 1);\n    this.setState({ tabs });\n  }\n\n  // Show the content on toggling\n  getAppContent = () => {\n    const { show, minimise } = this.state;\n    if (!show) {\n      return this.getNote();\n    }\n    if (minimise) {\n      return this.getBar();\n    }\n    return this.getContent();\n  };\n\n  // Shows the full window (normal window)\n  getContent = () => {\n    const {\n      color,\n      style,\n      barColor,\n      showActions,\n      hideTopBar,\n      allowTabs,\n      actionHandlers,\n    } = this.props;\n    const { activeTab, tabs } = this.state;\n\n    const barColorStyles = { backgroundColor: barColor };\n\n    return (\n      <div className=\"terminal-container-wrapper\" style={{ color, ...style }}>\n        {!hideTopBar && (\n          <Bar showActions={showActions} style={barColorStyles} {...actionHandlers} />\n        )}\n        {allowTabs && (\n          <Tabs\n            active={activeTab}\n            setActiveTab={this.setActiveTab}\n            createTab={this.createTab}\n            removeTab={this.removeTab}\n          />\n        )}\n        {tabs}\n      </div>\n    );\n  };\n\n  // Show only bar (minimise)\n  getBar = () => {\n    const { color, barColor, style, showActions, actionHandlers } = this.props;\n    const barColorStyles = { backgroundColor: barColor };\n\n    return (\n      <div className=\"terminal-container-wrapper\" style={{ color, ...style }}>\n        <Bar\n          showActions={showActions}\n          style={barColorStyles}\n          {...actionHandlers}\n        />\n      </div>\n    );\n  };\n\n  // Show msg (on window close)\n  getNote = () => (\n    <span className=\"terminal-note\">\n      <h1>OOPS! You closed the window.</h1>\n      <img\n        src=\"https://camo.githubusercontent.com/95ad3fffa11193f85dedbf14ca67e4c5c07182d0/687474703a2f2f69636f6e732e69636f6e617263686976652e636f6d2f69636f6e732f70616f6d656469612f736d616c6c2d6e2d666c61742f313032342f7465726d696e616c2d69636f6e2e706e67\"\n        width=\"200\"\n        height=\"200\"\n        alt=\"note\"\n        onClick={this.toggleState('show')}\n      />\n      Click on the icon to reopen.\n    </span>\n  );\n\n  // Plugin data getter\n  getPluginData = name => this.pluginData[name];\n\n  // Plugin data setter\n  setPluginData = (name, data) => (this.pluginData[name] = data);\n\n  // Set descriptions of the commands\n  setDescriptions = () => {\n    let descriptions = {\n      ...this.defaultDesciptions,\n      ...this.props.descriptions,\n    };\n    this.props.plugins.forEach((plugin) => {\n      if (plugin.descriptions) {\n        descriptions = {\n          ...descriptions,\n          ...plugin.descriptions,\n        };\n      }\n    });\n    this.setState({ descriptions });\n  };\n\n  // Set command shortcuts\n  setShortcuts = () => {\n    let shortcuts = getShortcuts({}, this.defaultShortcuts);\n    shortcuts = getShortcuts(shortcuts, this.props.shortcuts);\n    this.setState({ shortcuts });\n  };\n\n  // Setter to change the prefix of the input prompt\n  setPromptPrefix = (instance, promptPrefix) => {\n    instance.setState({ promptPrefix });\n  };\n\n  // Set the currently active tab\n  setActiveTab = (activeTab) => {\n    this.setState({ activeTab });\n  };\n\n  // Hide window\n  setFalse = name => () => this.setState({ [name]: false });\n\n  // Show window\n  setTrue = name => () => this.setState({ [name]: true });\n\n  /**\n  * set the input value with the possible history value\n  * @param {number} next position on the history\n  */\n  setValueWithHistory = (instance, position, inputRef) => {\n    const { history } = instance.state;\n    if (history[position]) {\n      instance.setState({ historyCounter: position });\n      inputRef.value = history[position];\n    }\n  };\n\n  // Used to keep track of all instances\n  registerInstance = (index, instance) => {\n    const { instances } = this.state;\n    const pluginInstances = {};\n    const pluginMethods = {};\n\n    const old = instances.find(i => i.index === index);\n\n    this.props.plugins.forEach((PluginClass) => {\n      try {\n        const api = {\n          printLine: this.printLine.bind(this, instance),\n          runCommand: this.runCommand.bind(this, instance),\n          setPromptPrefix: this.setPromptPrefix.bind(this, instance),\n          getPluginMethod: this.getPluginMethod.bind(this, instance),\n          getData: () => this.getPluginData(PluginClass.displayName),\n          setData: data => this.setPluginData(PluginClass.displayName, data),\n        };\n\n        let plugin;\n        if (old) {\n          old.pluginInstances[PluginClass.displayName].updateApi(api);\n        } else {\n          plugin = new PluginClass(api);\n\n          pluginMethods[PluginClass.displayName] = {\n            ...plugin.getPublicMethods(),\n            _getName: () => PluginClass.displayName,\n            _getVersion: () => PluginClass.version,\n          };\n        }\n\n        pluginInstances[PluginClass.displayName] = plugin;\n      } catch (e) {\n        console.error(`Error instantiating plugin ${PluginClass.displayName}`, e); // eslint-disable-line no-console\n      }\n    });\n\n    const data = {\n      index,\n      instance,\n      pluginMethods: old ? old.pluginMethods : pluginMethods,\n      pluginInstances: old ? old.pluginInstances : pluginInstances,\n    };\n\n    if (old) {\n      const realIndex = instances.indexOf(old);\n      instances[realIndex] = data;\n    } else {\n      instances.push(data);\n    }\n\n    this.setState({ instances });\n\n    return () => {\n      const insts = this.state.instances;\n      this.setState({\n        instances: insts.filter(i => !isEqual(i.instance, instance)),\n      });\n    };\n  }\n\n  // Toggle a state boolean\n  toggleState = name => () => this.setState({ [name]: !this.state[name] });\n\n  // Prepare the built-in commands\n  assembleCommands = () => {\n    let commands = {\n      ...this.defaultCommands,\n      ...this.props.commands,\n    };\n\n    this.props.plugins.forEach((plugin) => {\n      if (plugin.commands) {\n        commands = {\n          ...commands,\n          ...plugin.commands,\n        };\n      }\n    });\n\n    this.setState({ commands: modCommands(commands) });\n  };\n\n  /**\n   * autocomplete with the command the have the best match\n   * @param {object} input reference\n   */\n  autocompleteValue = (inputRef) => {\n    const { descriptions } = this.state;\n    const keysToCheck = Object.keys(descriptions).filter(\n      key => descriptions[key] !== false,\n    );\n    const { bestMatch } = stringSimilarity.findBestMatch(\n      inputRef.value,\n      keysToCheck,\n    );\n\n    if (bestMatch.rating >= 0.5) {\n      return bestMatch.target;\n    }\n\n    return inputRef.value;\n  };\n\n  // Refresh or clear the screen\n  clearScreen = (args, printLine, runCommand, instance) => {\n    instance.setState({ summary: [] });\n  };\n\n  // Method to check for shortcut and invoking commands\n  checkShortcuts = (instance, key, e) => {\n    const shortcuts = Object.keys(this.state.shortcuts);\n    if (shortcuts.length > 0) {\n      const { keyInputs } = instance.state;\n      let modKey = key;\n      if (key === 'meta') {\n        // eslint-disable-next-line no-nested-ternary\n        modKey = os === 'darwin' ? 'cmd' : os === 'win' ? 'win' : 'meta';\n      }\n      keyInputs.push(modKey);\n      const len = keyInputs.length;\n\n      const options = shortcuts\n        .map((cut, i) => [cut.replace(/\\s/g, '').split('+'), i])\n        .filter(cut => cut[0].length >= keyInputs.length)\n        .filter(cut => isEqual(cut[0].slice(0, len), keyInputs));\n\n      if (options.length > 0) {\n        if (options.length === 1 && options[0][0].length === len) {\n          const shortcut = shortcuts[options[0][1]];\n          const action = this.state.shortcuts[shortcut];\n          if (typeof action === 'string') {\n            this.runCommand(instance, this.state.shortcuts[shortcut]);\n          } else if (typeof action === 'function') {\n            e.preventDefault();\n            e.stopPropagation();\n            action();\n          }\n          instance.setState({ keyInputs: [] });\n        }\n      } else if (keyInputs.length > 0) {\n        instance.setState({ keyInputs: [] });\n      }\n    }\n  };\n\n  // edit-line command\n  editLine = (args, printLine, runCommand, instance) => {\n    const { summary } = instance.state;\n    let index = args.line;\n    if (index === -1) {\n      index = summary.length === 0 ? 0 : summary.length - 1;\n    }\n    summary[index] = args._.join(' ');\n    instance.setState({ summary });\n  };\n\n  // Listen for user input\n  handleChange = (instance, e) => {\n    const { input, promptPrefix, history } = instance.state;\n    if (e.key === 'Enter' && !e.shiftKey) {\n      if (typeof e.dontShowCommand === 'undefined') {\n        this.printLine.bind(this, instance)(\n          `${promptPrefix}${this.state.prompt} ${e.target.value}`,\n          false,\n        );\n      }\n\n      const res = this.runCommand(\n        instance,\n        `${input.join('\\n')}${input.length > 0 ? '\\n' : ''}${e.target.value}`,\n      );\n\n      if (typeof res !== 'undefined') {\n        this.printLine.bind(this, instance)(res);\n      }\n\n      const newHistory = [...history, e.target.value];\n      instance.setState({\n        input: [],\n        history: newHistory,\n        historyCounter: newHistory.length,\n      });\n      e.target.value = ''; // eslint-disable-line no-param-reassign\n    } else if (e.key === 'Enter' && e.shiftKey) {\n      this.printLine.bind(this, instance)(\n        `${promptPrefix}${this.state.prompt} ${e.target.value}`,\n        false,\n      );\n      const newHistory = [...history, e.target.value];\n      this.setState({\n        input: [...input, e.target.value],\n        history: newHistory,\n        historyCounter: newHistory.length,\n      });\n      e.target.value = ''; // eslint-disable-line no-param-reassign\n    }\n  };\n\n  /**\n   * Base of key code set the value of the input\n   * with the history\n   * @param {event} event of input\n   */\n  handlerKeyPress = (instance, e, inputRef) => {\n    const key = whatkey(e).key;\n    const { historyCounter, keyInputs } = instance.state;\n    if (keyInputs.length === 0) {\n      switch (key) {\n        case 'up':\n          this.setValueWithHistory(instance, historyCounter - 1, inputRef);\n          break;\n        case 'down':\n          this.setValueWithHistory(instance, historyCounter + 1, inputRef);\n          break;\n        case 'tab':\n          inputRef.value = this.autocompleteValue(inputRef);\n          e.preventDefault();\n          break;\n        default:\n          break;\n      }\n    }\n    this.checkShortcuts(instance, key, e);\n  }\n\n  // Plugins\n  loadPlugins = () => {\n    // TODO intance plugins\n    const pluginData = {};\n    this.props.plugins.forEach((plugin) => {\n      try {\n        pluginData[plugin.displayName] = plugin.defaultData;\n      } catch (e) {\n        console.error(`Error loading plugin ${plugin.displayName}`, e); // eslint-disable-line no-console\n      }\n    });\n    this.pluginData = pluginData;\n  };\n\n  // Plugin api method to get a public plugin method\n  getPluginMethod = (instance, name, method) => {\n    const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n    if (instanceData) {\n      if (instanceData.pluginMethods[name]) {\n        if (instanceData.pluginMethods[name][method]) {\n          return instanceData.pluginMethods[name][method];\n        }\n        throw new Error(\n          `No method with name ${name} has been registered for plugin ${name}`,\n        );\n      } else {\n        throw new Error(`No plugin with name ${name} has been registered`);\n      }\n    }\n    return null;\n  };\n\n  // Print the summary (input -> output)\n  printLine = (instance, inp, std = true) => {\n    let print = true;\n    if (std) {\n      const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n      if (instanceData) {\n        const plugins = instanceData.pluginInstances;\n        for (let i = 0; i < plugins.length; i += 1) {\n          try {\n            print = plugins[i].readStdOut(inp);\n          } catch (e) {\n            // Do nothing\n          }\n        }\n      }\n    }\n\n    if (print !== false) {\n      const summary = instance.state.summary;\n      summary.push(inp);\n      instance.setState({ summary });\n    }\n  };\n\n  // Execute the commands\n  runCommand = (instance, inputText) => {\n    const inputArray = inputText.split(' ');\n    const input = inputArray[0];\n    const args = inputArray; // Undefined for function call\n    const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n    let commands = { ...this.state.commands };\n    if (instanceData) {\n      Object.values(instanceData.pluginInstances).forEach((i) => {\n        commands = {\n          ...commands,\n          ...modCommands(i.commands),\n        };\n      });\n    }\n    const command = commands[input];\n    let res;\n\n    if (input === '') {\n      // do nothing\n    } else if (command === undefined) {\n      if (typeof this.props.commandPassThrough === 'function') {\n        res = this.props.commandPassThrough(\n          inputArray,\n          this.printLine.bind(this, instance),\n          this.runCommand.bind(this, instance),\n        );\n      } else {\n        this.printLine.bind(this, instance)(`-bash:${input}: command not found`);\n      }\n    } else {\n      const parsedArgs = command.parse(args);\n      const type = typeof parsedArgs;\n      if (type !== 'object' || (type === 'object' && !parsedArgs.help)) {\n        res = command.method(\n          parsedArgs,\n          this.printLine.bind(this, instance),\n          this.runCommand.bind(this, instance),\n          command.needsInstance === true ? instance : undefined,\n        );\n      }\n    }\n    return res;\n  };\n\n  // Print to active instance\n  printToActive = (...args) => {\n    const data = this.state.instances.find(i => i.index === this.state.activeTab);\n    if (data && data.instance !== null) {\n      this.printLine(data.instance, ...args);\n    }\n  }\n\n  // Listen for console logging and pass the input to handler (handleLogging)\n  watchConsoleLogging = () => {\n    handleLogging('log', this.printToActive);\n    handleLogging('info', this.printToActive);\n    // handleLogging('warn', this.printToActive);\n    // handleLogging('error', this.printToActive);\n  };\n\n  // List all the commands (state + user defined)\n  showHelp = (args, printLine, runCommand, instance) => {\n    let commands = { ...this.state.commands };\n    let descriptions = { ...this.state.descriptions };\n    const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n    if (instanceData) {\n      Object.values(instanceData.pluginInstances).forEach((i) => {\n        commands = {\n          ...commands,\n          ...i.commands,\n        };\n        descriptions = {\n          ...descriptions,\n          ...i.descriptions,\n        };\n      });\n    }\n    const options = Object.keys(commands);\n\n    for (const option of options) {\n      // eslint-disable-line no-restricted-syntax\n      if (descriptions[option] !== false) {\n        printLine(`${option} - ${descriptions[option]}`);\n      }\n    }\n  };\n\n  // Show the msg (prop msg)\n  showMsg = (args, printLine) => {\n    if (this.props.msg && this.props.msg.length > 0) {\n      printLine(this.props.msg);\n    }\n  };\n\n  render() {\n    return (\n      <div\n        className=\"terminal-base\"\n        style={this.state.maximise ? { maxWidth: '100%', height: '100%' } : {}}\n      >\n        {this.getAppContent()}\n      </div>\n    );\n  }\n}\n\nexport default Terminal;\n"]}